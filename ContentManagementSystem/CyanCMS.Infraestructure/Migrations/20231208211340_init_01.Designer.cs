// <auto-generated />
using System;
using CyanCMS.Infraestructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CyanCMS.Infraestructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231208211340_init_01")]
    partial class init_01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CyanCMS.Domain.Common.FileUnit", b =>
                {
                    b.Property<int>("FiledId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FiledId"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuditCreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuditUpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("ComponentId")
                        .HasColumnType("int");

                    b.Property<string>("FileBase64")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FileSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("FiledId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ComponentId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuditCreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuditUpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.Component", b =>
                {
                    b.Property<int>("ComponentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentId"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuditCreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuditUpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ComponentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComponentOrder")
                        .HasColumnType("int");

                    b.Property<int>("ComponentStyle")
                        .HasColumnType("int");

                    b.Property<string>("ComponentTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSlider")
                        .HasColumnType("bit");

                    b.HasKey("ComponentId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Component");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.ComponentType", b =>
                {
                    b.Property<int>("ComponentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComponentTypeId"));

                    b.Property<int>("ComponentId")
                        .HasColumnType("int");

                    b.Property<string>("ComponentTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComponentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ComponentTypeId");

                    b.HasIndex("ComponentId")
                        .IsUnique();

                    b.ToTable("ComponentType");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.Configuration", b =>
                {
                    b.Property<int>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfigurationId"));

                    b.Property<string>("MainColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfigurationId");

                    b.ToTable("Configuration");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.ConfigurationComponentType", b =>
                {
                    b.Property<int>("ConfigurationComponentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfigurationComponentTypeId"));

                    b.Property<int>("ComponentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ConfigurationId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ConfigurationComponentTypeId");

                    b.HasIndex("ComponentTypeId")
                        .IsUnique();

                    b.HasIndex("ConfigurationId");

                    b.ToTable("ConfigurationComponentType");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("AuditCreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuditCreateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AuditUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AuditUpdateUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("UserAdress")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UserToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CyanCMS.Domain.Common.FileUnit", b =>
                {
                    b.HasOne("CyanCMS.Domain.Entities.Company", "Company")
                        .WithMany("Files")
                        .HasForeignKey("CompanyId");

                    b.HasOne("CyanCMS.Domain.Entities.Component", "Component")
                        .WithMany("Files")
                        .HasForeignKey("ComponentId");

                    b.Navigation("Company");

                    b.Navigation("Component");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.Company", b =>
                {
                    b.HasOne("CyanCMS.Domain.Entities.User", "User")
                        .WithMany("Companies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.Component", b =>
                {
                    b.HasOne("CyanCMS.Domain.Entities.Company", "Company")
                        .WithMany("Components")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.ComponentType", b =>
                {
                    b.HasOne("CyanCMS.Domain.Entities.Component", "Component")
                        .WithOne("ComponentType")
                        .HasForeignKey("CyanCMS.Domain.Entities.ComponentType", "ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.ConfigurationComponentType", b =>
                {
                    b.HasOne("CyanCMS.Domain.Entities.ComponentType", "ComponentType")
                        .WithOne("ConfigurationComponentType")
                        .HasForeignKey("CyanCMS.Domain.Entities.ConfigurationComponentType", "ComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CyanCMS.Domain.Entities.Configuration", "Configuration")
                        .WithMany("ConfigurationComponentTypes")
                        .HasForeignKey("ConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ComponentType");

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.Company", b =>
                {
                    b.Navigation("Components");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.Component", b =>
                {
                    b.Navigation("ComponentType");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.ComponentType", b =>
                {
                    b.Navigation("ConfigurationComponentType");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.Configuration", b =>
                {
                    b.Navigation("ConfigurationComponentTypes");
                });

            modelBuilder.Entity("CyanCMS.Domain.Entities.User", b =>
                {
                    b.Navigation("Companies");
                });
#pragma warning restore 612, 618
        }
    }
}
